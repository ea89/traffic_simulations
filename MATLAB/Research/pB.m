%%B type car density output
%This function outputs a 1xL array to indicate the densities of the B
%type densities of the 

function [pnot, pBn, pBd, pCn, pCd] = pB(lambda, mun, mud, p, Nt, L, d, Nv)
    

%% Use fixed point iteration to find the parking efficiency

numIter = 20;
initGuess = 0.5;
q = ones(1,numIter);

q(1) = initGuess;

for n = 1:(numIter-1)
   q(n+1) =   1 - exp( -1 * lambda * ...
       L * (1 + (Nt/L * (1/ (1 + (p*q(n))/L*((1 - d)/mun + (d)/mud)))) + ...
        Nv/L - Nt/L )/(p *(1 - (Nt/...
              L * (1/ (1 + (p*q(n))/L*((1 - d)/mun + (d)/mud))) + ...
            Nv/L))));
            
    
end
q(20)
% now find the road density

pnot =   Nt/L * (1/ (1 + (p*q(numIter) )/...
           L*((1 - d)/mun + (d)/mud)))+ Nv/L;
pnotC = pnot;       
pnotC - (Nv/L)       
pBn = zeros(1,L);
pBd = zeros(1,L);
pCn = zeros(1,L);
pCd = zeros(1,L);

%%Handling initial conditions

pBnnot = (pnot - Nv/L)* (1-d);
pBdnot = (pnot - Nv/L)* d;


pBn(1) =  exp(log((-lambda)*mud*mun*pBnnot - ...
    mud*mun*p*pBnnot + ...
    lambda*mun*p*pBdnot*pBnnot + ...
     lambda*mud*p*pBnnot^2 + ...
     mud*mun*p*pBnnot*pnotC + ...
     sqrt((lambda*mud*mun*pBnnot + ...
     mud*mun*p*pBnnot - lambda*mun*p*pBdnot*pBnnot -...
         lambda*mud*p*pBnnot^2 - mud*mun*p*pBnnot*pnotC)^2 - ...
       4*(lambda*mun*p*pBdnot + lambda*mud*p*pBnnot)*((-mud)*mun*p*pBnnot^2 + ...
         mud*mun*p*pBnnot^2*pnotC))) - log(2*(lambda*mun*p*pBdnot + lambda*mud*p*pBnnot)));

pBd(1) =  exp(log(pBdnot*(sqrt( ...
        pBnnot^2*((lambda*(-(mud*mun) + mud*p*pBnnot + ...
                 mun*p*pBdnot) + mud*mun*p*(pnotC - 1))^2 - ...
           4*lambda*mud*mun*p^2*(pnotC - 1)* ...
                         (mud*pBnnot + mun*pBdnot))) - ...
       lambda*mud*mun*pBnnot + lambda*mud*p*pBnnot^2 + ...
       lambda*mun*p*pBdnot*pBnnot + mud*mun*p*pBnnot*pnotC - ...
                mud*mun*p*pBnnot)) - ...
   log(2*lambda*p*pBnnot*(mud*pBnnot + mun*pBdnot)));

pCn(1) = exp(-log(2*lambda*mun*(mun*pBdnot + mud*pBnnot)) + ...
log(lambda*mud*mun*pBnnot + mud*mun*p*pBnnot + ...
lambda*mun*p*pBdnot*pBnnot + lambda*mud*p*pBnnot^2 - ...
        sqrt(pBnnot^2*(-4*lambda^2*mud*mun*p*(mun*pBdnot + mud*pBnnot) + ...
        (lambda*(mun*p*pBdnot + mud*(mun + p*pBnnot)) - ...
        mud*mun*p*(-1 + pnotC))^2)) - mud*mun*p*pBnnot*pnotC));
    
    
pCd(1) =  exp(-log(2*lambda*mud*pBnnot*(mun*pBdnot + mud*pBnnot)) + ...
    log(pBdnot*(lambda*mud*mun*pBnnot + mud*mun*p*pBnnot + ...
    lambda*mun*p*pBdnot*pBnnot + lambda*mud*p*pBnnot^2 - ...
         sqrt(pBnnot^2*(-4*lambda^2*mud*mun*p*(mun*pBdnot + mud*pBnnot) + ...
         (lambda*(mun*p*pBdnot + mud*(mun + p*pBnnot)) - mud*mun*p*(-1 + pnotC))^2)) ...
         - mud*mun*p*pBnnot*pnotC)));
    
%%Updating the values per i.     
     
for i = 2:L
    
   pBn(i) =  exp(log(sqrt((lambda*mud*mun*pBn(i-1) - lambda*mud*p*pBn(i-1)^2 - ...
          lambda*mun*p*pBd(i-1)*pBn(i-1) - mud*mun*p*pBn(i-1)*pnotC + ...
          mud*mun*p*pBn(i-1))^2 -       ...    
       4*(mud*mun*p*pBn(i-1)^2*pnotC - ...
          mud*mun*p*pBn(i-1)^2)*(lambda*mud*p*pBn(i-1) + ...
          lambda*mun*p*pBd(i-1))) - lambda*mud*mun*pBn(i-1) + ...
     lambda*mud*p*pBn(i-1)^2 + ...
             lambda*mun*p*pBd(i-1)*pBn(i-1) + ...
     mud*mun*p*pBn(i-1)*pnotC - mud*mun*p*pBn(i-1)) - ...
   log(2*(lambda*mud*p*pBn(i-1) + lambda*mun*p*pBd(i-1))));
 
pBd(i) =  exp(log(pBd(i-1)*(sqrt( ...
        pBn(i-1)^2*((lambda*(-(mud*mun) + mud*p*pBn(i-1) + ...
                 mun*p*pBd(i-1)) + mud*mun*p*(pnotC - 1))^2 - ...
           4*lambda*mud*mun*p^2*(pnotC - 1)* ...
                         (mud*pBn(i-1) + mun*pBd(i-1)))) - ...
       lambda*mud*mun*pBn(i-1) + lambda*mud*p*pBn(i-1)^2 + ...
       lambda*mun*p*pBd(i-1)*pBn(i-1) + mud*mun*p*pBn(i-1)*pnotC - ...
                mud*mun*p*pBn(i-1))) - ...
   log(2*lambda*p*pBn(i-1)*(mud*pBn(i-1) + mun*pBd(i-1))));
 
pCn(i) = exp(-log(2*lambda*mun*(mun*pBd(i-1) + mud*pBn(i-1))) + ...
log(lambda*mud*mun*pBn(i-1) + mud*mun*p*pBn(i-1) + ...
lambda*mun*p*pBd(i-1)*pBn(i-1) + lambda*mud*p*pBn(i-1)^2 - ...
        sqrt(pBn(i-1)^2*(-4*lambda^2*mud*mun*p*(mun*pBd(i-1) + mud*pBn(i-1)) + ...
        (lambda*(mun*p*pBd(i-1) + mud*(mun + p*pBn(i-1))) - ...
        mud*mun*p*(-1 + pnotC))^2)) - mud*mun*p*pBn(i-1)*pnotC));
    
    
pCd(i) =  exp(-log(2*lambda*mud*pBn(i-1)*(mun*pBd(i-1) + mud*pBn(i-1))) + ...
    log(pBd(i-1)*(lambda*mud*mun*pBn(i-1) + mud*mun*p*pBn(i-1) + ...
    lambda*mun*p*pBd(i-1)*pBn(i-1) + lambda*mud*p*pBn(i-1)^2 - ...
         sqrt(pBn(i-1)^2*(-4*lambda^2*mud*mun*p*(mun*pBd(i-1) + mud*pBn(i-1)) + ...
         (lambda*(mun*p*pBd(i-1) + mud*(mun + p*pBn(i-1))) - mud*mun*p*(-1 + pnotC))^2)) ...
         - mud*mun*p*pBn(i-1)*pnotC)));
     
end    
    
     
     
    

end